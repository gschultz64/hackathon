<div class="row">
  <div class="col s12 m8">
    <div id="map"></div>
  </div>
  <div class="col s12 m4" id="searchbar">
    <div class="options-box">
      <div>
        <input id="places-search" type="text" placeholder="Search">
        <input id="go-places" class="btn blue-grey darken-2" type="button" value="Search" />
      </div>
      <div class="switch">
        <label for "switch">Show nearby bus stops</label>
        </br>
        <label>
          <input type="checkbox">
          <span class="lever"></span>
        </label>
      </div>
      <div class="results-box">
        <h4>Bike Rack Results</h4>
        <% results.forEach(function(rack) { %>
          <%= rack.unitdesc %>
            <%= rack.latitude, rack.longitude %>
              <% console.log(rack) %>
                <% }); %>
      </div>
    </div>
  </div>

  <script>
    var map;
    var markers = [];
    var placeMarkers = [];

    function initMap() {
      
      // Constructor creates a new map - only center and zoom are required
      map = new google.maps.Map(document.getElementById('map'), {
        center: { lat: 47.6076641, lng: -122.3355026 },
        zoom: 11,
        mapTypeControl: false
      });

      var locations = [
      {title: "RAVENNA AVE NE 0630 BLOCK W SIDE ( 298) 36 FT S/O NE 65TH ST",
        location: {lat: 47.6756, lng: -122.3039}}, 
      {title: "E MADISON ST 0140 BLOCK SE SIDE (  39) 39 FT NE/O 14TH AVE",
        location: {lat: 47.6139,lng: -122.314}},
      {title: "E MADISON ST 0140 BLOCK SE SIDE (  76) 31 FT SW/O E PIKE ST", location:{lat: 47.614,
        lng: -122.3138}},
      {title: "BROOKLYN AVE NE 0380 BLOCK E SIDE ( 523) 62 FT S/O NE 40TH ST", location: {lat: 47.6551,
        lng: -122.3143}},
      {title: "BROOKLYN AVE NE 0450 BLOCK E SIDE ( 200) 200 FT N/O NE 45TH ST", location: {lat: 47.6619,
        lng: -122.3141}},
      {title: "BROOKLYN AVE NE 0500 BLOCK W SIDE ( 466) 34 FT S/O NE 52ND ST", location:{lat: 47.6663,
        lng: -122.3143}},
      {title: "E REPUBLICAN ST 0145 BLOCK S SIDE ( 204) 17 FT W/O 15TH S AVE E", location: {lat: 47.6231,
        lng: -122.3128}},
      {title: "MERIDIAN AVE N 0330 BLOCK E SIDE (  82) 82 FT N/O N NORTHLAKE WAY", location: {lat: 47.6471,
        lng: -122.3339}},
      {title: "MERIDIAN AVE N 0330 BLOCK E SIDE ( 358) 41 FT S/O N 34TH ST", location:{lat: 47.6479,
        lng: -122.3338}}
    ];

      var largeInfoWindow = new google.maps.InfoWindow();

      // Style the markers a bit. This will be our listing marker icon.
      var defaultIcon = makeMarkerIcon('e7453c');
      // Create a "highlighted location" marker color for when the user
      // mouses over the marker.
      var highlightedIcon = makeMarkerIcon('0cb19f');

      for (var i = 0; i < locations.length; i++) {
        // Get the position from the location array.
        var position = locations[i].location;
        var title = locations[i].title;
        // Create a marker per location, and put into markers array.
        console.log(position)
        console.log(title)
        var marker = new google.maps.Marker({
          position: position,
          title: title,
          animation: google.maps.Animation.DROP,
          icon: defaultIcon,
          id: i
        });
        // Push the marker to our array of markers.
        markers.push(marker);
        console.log(markers)
        // Create an onclick event to open an infowindow at each marker.
        marker.addListener('click', function () {
          populateInfoWindow(this, largeInfowindow);
        });
        // Two event listeners - one for mouseover, one for mouseout,
        // to change the colors back and forth.
        marker.addListener('mouseover', function () {
          this.setIcon(highlightedIcon);
        });
        marker.addListener('mouseout', function () {
          this.setIcon(defaultIcon);
        });
      }

      // Search box to execute a places search
      var searchBox = new google.maps.places.SearchBox(
        document.getElementById('places-search'));
      // Bias the search box to within the bounds of the map
      searchBox.setBounds(map.getBounds());

      
      // Listen for the event fired when the user selects a prediction and clicks "Go"
      // more details for that place.
      document.getElementById('go-places').addEventListener('click', textSearchPlaces);
    }

    // This function populates the infowindow when the marker is clicked. We'll only allow
    // one infowindow which will open at the marker that is clicked, and populate based
    // on that markers position.
    function populateInfoWindow(marker, infowindow) {
      // Check to make sure the infowindow is not already opened on this marker.
      if (infowindow.marker != marker) {
        infowindow.setContent('');
        infowindow.marker = marker;
        // Make sure the marker property is cleared if the infowindow is closed.
        infowindow.addListener('closeclick', function () {
          infowindow.setMarker = null;
        });
        var streetViewService = new google.maps.StreetViewService();
        var radius = 50;
        // In case the status is OK, which means the pano was found, compute the
        // position of the streetview image, then calculate the heading, then get a
        // panorama from that and set the options
        function getStreetView(data, status) {
          if (status == google.maps.StreetViewStatus.OK) {
            var nearStreetViewLocation = data.location.latLng;
            var heading = google.maps.geometry.spherical.computeHeading(
              nearStreetViewLocation, marker.position);
            infowindow.setContent('<div>' + marker.title + '</div><div id="pano"></div>');
            var panoramaOptions = {
              position: nearStreetViewLocation,
              pov: {
                heading: heading,
                pitch: 30
              }
            };
            var panorama = new google.maps.StreetViewPanorama(
              document.getElementById('pano'), panoramaOptions);
          } else {
            infowindow.setContent('<div>' + marker.title + '</div>' +
              '<div>No Street View Found</div>');
          };
        };
        // Use streetview service to get the closest streetview image within
        // 50 meters of the markers position
        streetViewService.getPanoramaByLocation(marker.position, radius, getStreetView);
        // Open the infowindow on the correct marker.
        infowindow.open(map, marker);
      };
    };

    // This function takes in a COLOR, and then creates a new marker
    // icon of that color. The icon will be 21 px wide by 34 high, have an origin
    // of 0, 0 and be anchored at 10, 34).
    function makeMarkerIcon(markerColor) {
      var markerImage = new google.maps.MarkerImage(
        'http://chart.googleapis.com/chart?chst=d_map_spin&chld=1.15|0|' + markerColor +
        '|40|_|%E2%80%A2',
        new google.maps.Size(21, 34),
        new google.maps.Point(0, 0),
        new google.maps.Point(10, 34),
        new google.maps.Size(21, 34));
      return markerImage;
    };

    // This function will loop through the markers array and display them all.
    function showListings() {
      var bounds = new google.maps.LatLngBounds();
      // Extend the boundaries of the map for each marker and display the marker.
      for (var i = 0; i < markers.length; i++) {
        markers[i].setMap(map);
        bounds.extend(markers[i].position);
      };
      map.fitBounds(bounds);
    };

    // This function will loop through the listings and hide them all.
    function hideMarkers(markers) {
      for (var i = 0; i < markers.length; i++) {
        markers[i].setMap(null);
      };
    };

    // This function fires when the user selects "go" on the places search.
    // It will do a nearby search using the entered query string or place.
    function textSearchPlaces() {
      var bounds = map.getBounds();
      hideMarkers(placeMarkers);
      var placesService = new google.maps.places.PlacesService(map);
      placesService.textSearch({
        query: document.getElementById('places-search').value,
        bounds: bounds
      }, function (results, status) {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
          createMarkersForPlaces(results);
        };
      });
    };

    // This function creates markers for each place found in either places search.
    function createMarkersForPlaces(places) {
      var bounds = new google.maps.LatLngBounds();
      for (var i = 0; i < places.length; i++) {
        var place = places[i];
        var icon = {
          url: place.icon,
          size: new google.maps.Size(35, 35),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(15, 34),
          scaledSize: new google.maps.Size(25, 25)
        };
        // Create a marker for each place
        var marker = new google.maps.Marker({
          map: map,
          position: place.geometry.location,
          title: place.name,
          animation: google.maps.Animation.DROP,
          icon: icon,
          id: place.place_id
        });
        // Create a single infowindow to be used with the place details information
        // so that only one is open at once.
        var placeInfoWindow = new google.maps.InfoWindow();
        // If a marker is clicked, do a place details search on it in the next function.
        marker.addListener('click', function () {
          if (placeInfoWindow.marker == this) {
            console.log("This infowindow already is on this marker!");
          } else {
            getPlacesDetails(this, placeInfoWindow);
          }
        });
        placeMarkers.push(marker);
        if (place.geometry.viewport) {
          // Only geocodes have viewport
          bounds.union(place.geometry.viewport);
        } else {
          bounds.extend(place.geometry.location);
        };
      };
      map.fitBounds(bounds);
    };

    // This is the PLACE DETAILS search - it's the most detailed so it's only
    // executed when a marker is selected, indicating the user wants more
    // details about that place.
    function getPlacesDetails(marker, infowindow) {
      var service = new google.maps.places.PlacesService(map);
      service.getDetails({
        placeId: marker.id
      }, function (place, status) {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
          // Set the marker property on this infowindow so it isn't created again.
          infowindow.marker = marker;
          var innerHTML = '<div>';
          if (place.name) {
            innerHTML += '<strong>' + place.name + '</strong>';
          }
          if (place.formatted_address) {
            innerHTML += '<br>' + place.formatted_address;
          }
          if (place.formatted_phone_number) {
            innerHTML += '<br>' + place.formatted_phone_number;
          }
          if (place.opening_hours) {
            innerHTML += '<br><br><strong>Hours:</strong><br>' +
              place.opening_hours.weekday_text[0] + '<br>' +
              place.opening_hours.weekday_text[1] + '<br>' +
              place.opening_hours.weekday_text[2] + '<br>' +
              place.opening_hours.weekday_text[3] + '<br>' +
              place.opening_hours.weekday_text[4] + '<br>' +
              place.opening_hours.weekday_text[5] + '<br>' +
              place.opening_hours.weekday_text[6];
          }
          if (place.photos) {
            innerHTML += '<br><br><img src="' + place.photos[0].getUrl(
              { maxHeight: 100, maxWidth: 200 }) + '">';
          }
          // Form and button to add location data to locations table
          // Need location name, address, place_id, lat, lng
          innerHTML += '<br/>'
          innerHTML += '</div>';
          infowindow.setContent(innerHTML);
          infowindow.open(map, marker);
          // Make sure the marker property is cleared if the infowindow is closed.
          infowindow.addListener('closeclick', function () {
            infowindow.marker = null;
          });
        }
      });
    }


  </script>
  <script async defer src="https://maps.googleapis.com/maps/api/js?key=<%= process.env.KEY %>&libraries=places&v=3&callback=initMap">
  </script>